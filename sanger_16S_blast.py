#Daniel Castaneda Mogollon, PhD
#04/20/2025
#This script was made in order to determine if the 16S full-length sequences from Sanger sequencing matches the expected
#species or genus from the WGS GTDBtk. It also checks if it matches the 16S rRNA v3v4 region from the UofT results. It will
#save the taxa that do match and indicate it in a file.

import pandas as pd
import os

path = "/Users/danielcm/Desktop/Sycuro/Projects/Diabetes/t1d_db_fixed_discussed/"
os.chdir(path)
master_file = pd.read_csv("/Users/danielcm/Desktop/Sycuro/Projects/Diabetes/WGS_all_runs/FINAL_report_WGS_r220_May.csv")
subset_master_file = master_file[['Sample ID', 'Sanger classification (v3v4) Source','Selected for Downstream','GTDBtk Species Classification (pplacer)']]
subset_master_file = subset_master_file[subset_master_file['Selected for Downstream']=='Yes']                           #Filtering only those species that passed the WGS high-quality
my_dict={}

for file in os.listdir(path+"fixed_assembly_benchling"):
    #print(file)#This section filters by identity and e-value, and gets unique species names. The ID of the file and species is appended to a dictionary.
    if file.endswith(".csv") and file.startswith("S"):
        df = pd.read_csv(path+"fixed_assembly_benchling/"+file, sep=",",header=None)                                                         #Each df is the BLAST output file for each sample
        df.columns = ['Sequence ID','Species ID','Bit Score','Score','E-value','% of identity','Sequence']              #Assigning column names to each BLAST output file (blasting against 16S GTDB r2.2.0)
        #print(df.dtypes)
        df_filtered = df[(df['% of identity']>=97) & (df['E-value']<=1e-100)].copy()                                    #Filtering by high identity and low e-value
        df_filtered['Species name'] = df_filtered['Species ID'].apply(lambda x: x.split(" ")[-2:])                      #This only takes the last two items after separating by a space (Genus and Species)
        df_filtered['Species name'] = df_filtered['Species name'].apply(lambda x: " ".join(x))                          #This joins the two items generated by a space, so it is only one item now
        unique_species = df_filtered['Species name'].unique()
        unique_genus = df_filtered['Species name'].apply(lambda x: x.split(" ")[0]).unique()
        sequence = df_filtered['Sequence']
        file_id = file.split(".")[0]
        my_dict[file_id] = unique_species.tolist(), unique_genus.tolist(), sequence.tolist()
        if(df_filtered['Sequence ID']=='seq2').any():
            print(df_filtered['Sequence ID'],df_filtered['Species name'],df_filtered['E-value'],df_filtered['% of identity'])
            print(df_filtered.dtypes)

#This section retrieves the original sequence from each sample. These are the original 16S full-length sequences
raw_16S_dict = {}
for file in os.listdir("/Users/danielcm/Desktop/Sycuro/Projects/Diabetes/t1d_db_fixed_discussed/fixed_assembly_benchling/full_length"):
    file_name = file.split(".")[0]
    sequence = ''
    with open(path+"fixed_assembly_benchling/full_length/"+file, encoding="ISO-8859-1") as f:
        lines = f.readlines()
        for line in lines:
            if not line.startswith(">"):
                sequence = sequence + line.strip()
        raw_16S_dict[file_name] = sequence

subset_master_file = subset_master_file.set_index('Sample ID')
fasta_out = open("Sanger_fasta_output.fasta","w")
info_list=[]
nothing_found_id = []
for sample_id,(species,genus,sequence) in my_dict.items():
    gtdbtk_species = subset_master_file.loc[sample_id,"GTDBtk Species Classification (pplacer)"]
    sanger_species = subset_master_file.loc[sample_id,'Sanger classification (v3v4) Source']
    gtdbtk_genus = subset_master_file.loc[sample_id,'GTDBtk Species Classification (pplacer)'].split(" ")[0]
    sanger_genus = subset_master_file.loc[sample_id,'Sanger classification (v3v4) Source'].split(" ")[0]
    match_gtdbtk_species = gtdbtk_species in species
    match_gtdbtk_genus = gtdbtk_genus in genus
    match_sanger_species = sanger_species in species
    match_sanger_genus = sanger_genus in genus
    if (match_gtdbtk_species==True) or (match_gtdbtk_genus==True) or (match_sanger_species==True) or (match_sanger_genus==True):
        if sample_id in raw_16S_dict:
            seq = raw_16S_dict[sample_id]
            fasta_out.write(">"+sample_id+"\n"+seq+"\n")
    else:
        seq = None
        nothing_found_id.append(sample_id)
    info_list.append({
        'Sample ID': sample_id,
        'GTDBtk species': gtdbtk_species,
        'Sanger species (source)': sanger_species,
        'GTDBtk Species matches 16s?': match_gtdbtk_species,
        'GTDBtk Genus matches 16s?': match_gtdbtk_genus,
        'Sanger Species matches 16s?': match_sanger_species,
        'Sanger Genus matches 16s?': match_sanger_genus,
        'Original query sequence': seq
    })
df_final = pd.DataFrame(info_list)
df_final.to_csv("Sanger_16S_blast.csv",index=False)
print("The sample IDs with no match are: "+str(nothing_found_id))
